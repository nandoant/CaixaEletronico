{
  "info": {
    "name": "Caixa Eletr√¥nico API",
    "description": "Cole√ß√£o completa de endpoints para testar a API do Caixa Eletr√¥nico",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminUserId",
      "value": "",
      "type": "string"
    },
    {
      "key": "contaId",
      "value": "",
      "type": "string"
    },
    {
      "key": "contaId2",
      "value": "",
      "type": "string"
    },
    {
      "key": "operacaoId",
      "value": "",
      "type": "string"
    },
    {
      "key": "pagamentoId",
      "value": "",
      "type": "string"
    },
    {
      "key": "saqueOpcaoId",
      "value": "",
      "type": "string"
    },
    {
      "key": "randomUser",
      "value": "",
      "type": "string"
    },
    {
      "key": "randomEmail",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Autentica√ß√£o",
      "item": [
        {
          "name": "1. Registrar Usu√°rio",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Gerar dados din√¢micos para o usu√°rio",
                  "const timestamp = Date.now();",
                  "const randomUser = `usuario${timestamp}`;",
                  "const randomEmail = `${randomUser}@exemplo.com`;",
                  "",
                  "pm.collectionVariables.set('randomUser', randomUser);",
                  "pm.collectionVariables.set('randomEmail', randomEmail);",
                  "",
                  "console.log('üöÄ Gerando usu√°rio din√¢mico:', randomUser);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registrar Usu√°rio - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Registrar Usu√°rio - Resposta cont√©m userId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Usu√°rio registrado com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao registrar usu√°rio:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"{{randomUser}}\",\n  \"email\": \"{{randomEmail}}\",\n  \"senha\": \"senha123\",\n  \"perfil\": \"CLIENTE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "2. Registrar Admin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Gerar dados din√¢micos para o admin",
                  "const timestamp = Date.now();",
                  "const randomAdmin = `admin${timestamp}`;",
                  "const randomAdminEmail = `${randomAdmin}@exemplo.com`;",
                  "",
                  "pm.collectionVariables.set('randomAdmin', randomAdmin);",
                  "pm.collectionVariables.set('randomAdminEmail', randomAdminEmail);",
                  "",
                  "console.log('üöÄ Gerando admin din√¢mico:', randomAdmin);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registrar Admin - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Registrar Admin - Resposta cont√©m userId', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Admin registrado com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao registrar admin:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"{{randomAdmin}}\",\n  \"email\": \"{{randomAdminEmail}}\",\n  \"senha\": \"admin123\",\n  \"perfil\": \"ADMIN\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "3. Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login - Resposta cont√©m token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    // Salva nas vari√°veis de cole√ß√£o",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "    pm.collectionVariables.set('userId', response.userId);",
                  "    // Salva tamb√©m nas vari√°veis de ambiente (se existir)",
                  "    pm.environment.set('authToken', response.token);",
                  "    pm.environment.set('userId', response.userId);",
                  "    console.log('‚úÖ Token salvo automaticamente:', response.token);",
                  "    console.log('‚úÖ User ID salvo:', response.userId);",
                  "    console.log('‚úÖ Login realizado com sucesso!');",
                  "} else {",
                  "    console.log('‚ùå Erro no login:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"{{randomUser}}\",\n  \"senha\": \"senha123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "3.1. Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login Admin - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login Admin - Resposta cont√©m token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    // Salva nas vari√°veis de cole√ß√£o",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "    pm.collectionVariables.set('adminToken', response.token);",
                  "    pm.collectionVariables.set('adminUserId', response.userId);",
                  "    // Salva tamb√©m nas vari√°veis de ambiente (se existir)",
                  "    pm.environment.set('authToken', response.token);",
                  "    pm.environment.set('adminToken', response.token);",
                  "    pm.environment.set('adminUserId', response.userId);",
                  "    console.log('‚úÖ Token ADMIN salvo automaticamente:', response.token);",
                  "    console.log('‚úÖ Admin User ID salvo:', response.userId);",
                  "    console.log('‚úÖ Login ADMIN realizado com sucesso!');",
                  "} else {",
                  "    console.log('‚ùå Erro no login admin:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"{{randomAdmin}}\",\n  \"senha\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "4. Obter Dados do Usu√°rio Logado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Obter Dados do Usu√°rio - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Obter Dados do Usu√°rio - Resposta cont√©m dados', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('userId');",
                  "    pm.expect(jsonData).to.have.property('login');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Dados do usu√°rio obtidos com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao obter dados do usu√°rio:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          },
          "response": []
        },
        {
          "name": "5. Listar Contas Dispon√≠veis",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Listar Contas - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Listar Contas - Resposta cont√©m contas', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('contas');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.contas && response.contas.length > 0) {",
                  "        // Salva primeira conta",
                  "        pm.collectionVariables.set('contaId', response.contas[0].id);",
                  "        pm.environment.set('contaId', response.contas[0].id);",
                  "        ",
                  "        // Salva segunda conta se existir (para transfer√™ncias)",
                  "        if (response.contas.length > 1) {",
                  "            pm.collectionVariables.set('contaId2', response.contas[1].id);",
                  "            pm.environment.set('contaId2', response.contas[1].id);",
                  "            console.log('‚úÖ Segunda conta salva para transfer√™ncias:', response.contas[1].id);",
                  "        }",
                  "        ",
                  "        console.log('‚úÖ Conta ID salvo automaticamente:', response.contas[0].id);",
                  "        console.log('‚úÖ Total de contas encontradas:', response.contas.length);",
                  "    } else {",
                  "        console.log('‚ö†Ô∏è  Nenhuma conta encontrada');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Erro ao listar contas:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/contas-disponiveis",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "contas-disponiveis"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Opera√ß√µes Banc√°rias",
      "item": [
        {
          "name": "1. Realizar Dep√≥sito",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Realizar Dep√≥sito - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Realizar Dep√≥sito - Resposta cont√©m confirma√ß√£o', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('valor');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Dep√≥sito realizado com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao realizar dep√≥sito:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contaId\": {{contaId}},\n  \"valor\": 500.00,\n  \"cedulas\": {\n    \"DUZENTOS\": 2,\n    \"CEM\": 1\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/operacoes/deposito",
              "host": ["{{baseUrl}}"],
              "path": ["operacoes", "deposito"]
            }
          },
          "response": []
        },
        {
          "name": "2. Realizar Transfer√™ncia",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Realizar Transfer√™ncia - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Realizar Transfer√™ncia - Resposta cont√©m confirma√ß√£o', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('valor');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Transfer√™ncia realizada com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao realizar transfer√™ncia:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contaOrigemId\": {{contaId}},\n  \"contaDestinoId\": {{contaId2}},\n  \"valor\": 100.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/operacoes/transferencia",
              "host": ["{{baseUrl}}"],
              "path": ["operacoes", "transferencia"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Opera√ß√µes de Saque",
      "item": [
        {
          "name": "1. Obter Op√ß√µes de Saque",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Obter Op√ß√µes de Saque - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Obter Op√ß√µes de Saque - Resposta cont√©m op√ß√µes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('opcoes');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('üîç Debug - Resposta completa:', JSON.stringify(response, null, 2));",
                  "    ",
                  "    if (response.opcoes && Array.isArray(response.opcoes) && response.opcoes.length > 0) {",
                  "        const primeiraOpcao = response.opcoes[0];",
                  "        console.log('üîç Debug - Primeira op√ß√£o:', JSON.stringify(primeiraOpcao, null, 2));",
                  "        ",
                  "        // A propriedade correta √© 'idOpcao' baseado na classe CombinacaoCedulas",
                  "        let opcaoId = primeiraOpcao.idOpcao || primeiraOpcao.id || primeiraOpcao.uuid;",
                  "        ",
                  "        if (opcaoId) {",
                  "            // Salva o ID da primeira op√ß√£o",
                  "            pm.collectionVariables.set('saqueOpcaoId', opcaoId);",
                  "            pm.environment.set('saqueOpcaoId', opcaoId);",
                  "            console.log('‚úÖ Op√ß√µes de saque obtidas com sucesso');",
                  "            console.log('‚úÖ ID da primeira op√ß√£o salvo:', opcaoId);",
                  "        } else {",
                  "            console.log('‚ùå ID da op√ß√£o n√£o encontrado na resposta');",
                  "            console.log('üîç Propriedades dispon√≠veis:', Object.keys(primeiraOpcao));",
                  "        }",
                  "    } else {",
                  "        console.log('‚ö†Ô∏è  Nenhuma op√ß√£o de saque dispon√≠vel ou formato inv√°lido');",
                  "        console.log('üîç Tipo de opcoes:', typeof response.opcoes);",
                  "        console.log('üîç Length:', response.opcoes ? response.opcoes.length : 'undefined');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Erro ao obter op√ß√µes de saque:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/operacoes/saque/opcoes?contaId={{contaId}}&valor=200",
              "host": ["{{baseUrl}}"],
              "path": ["operacoes", "saque", "opcoes"],
              "query": [
                {
                  "key": "contaId",
                  "value": "{{contaId}}"
                },
                {
                  "key": "valor",
                  "value": "200"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "2. Confirmar Saque",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Verifica se o ID da op√ß√£o de saque foi salvo",
                  "const saqueOpcaoId = pm.collectionVariables.get('saqueOpcaoId') || pm.environment.get('saqueOpcaoId');",
                  "",
                  "if (!saqueOpcaoId || saqueOpcaoId === '' || saqueOpcaoId === 'undefined') {",
                  "    console.log('‚ö†Ô∏è  ID da op√ß√£o de saque n√£o encontrado');",
                  "    console.log('üîß Gerando UUID tempor√°rio para teste...');",
                  "    ",
                  "    // Gera um UUID tempor√°rio para o teste (pode falhar, mas permite continuar)",
                  "    const tempUUID = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        const r = Math.random() * 16 | 0;",
                  "        const v = c === 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "    ",
                  "    pm.collectionVariables.set('saqueOpcaoId', tempUUID);",
                  "    console.log('üîß UUID tempor√°rio gerado:', tempUUID);",
                  "    console.log('üí° Execute \"Obter Op√ß√µes de Saque\" primeiro para obter ID v√°lido');",
                  "} else {",
                  "    console.log('‚úÖ ID da op√ß√£o de saque encontrado:', saqueOpcaoId);",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const saqueOpcaoId = pm.collectionVariables.get('saqueOpcaoId');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Confirmar Saque - Status 200', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    pm.test('Confirmar Saque - Resposta cont√©m confirma√ß√£o', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "        pm.expect(jsonData).to.have.property('valor');",
                  "    });",
                  "    ",
                  "    console.log('‚úÖ Saque confirmado com sucesso');",
                  "} else if (pm.response.code === 400 && saqueOpcaoId && saqueOpcaoId.includes('xxxxxxxx')) {",
                  "    console.log('‚ö†Ô∏è  Saque falhou com UUID tempor√°rio (esperado)');",
                  "    console.log('üí° Execute \"Obter Op√ß√µes de Saque\" primeiro para obter ID v√°lido');",
                  "} else {",
                  "    console.log('‚ùå Erro ao confirmar saque:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contaId\": {{contaId}},\n  \"valor\": 200,\n  \"idOpcao\": \"{{saqueOpcaoId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/operacoes/saque",
              "host": ["{{baseUrl}}"],
              "path": ["operacoes", "saque"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Pagamentos",
      "item": [
        {
          "name": "1. Agendar Transfer√™ncia entre Contas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Agendar Transfer√™ncia - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Agendar Transfer√™ncia - Resposta cont√©m dados da transfer√™ncia', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('contaOrigemId');",
                  "    pm.expect(jsonData).to.have.property('contaDestinoId');",
                  "    pm.expect(jsonData).to.have.property('valorTotal');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    // Salva o ID da transfer√™ncia para usar em outros testes",
                  "    pm.collectionVariables.set('transferenciaId', response.id);",
                  "    pm.environment.set('transferenciaId', response.id);",
                  "    console.log('‚úÖ Transfer√™ncia agendada com sucesso');",
                  "    console.log('‚úÖ ID da transfer√™ncia salvo:', response.id);",
                  "} else {",
                  "    console.log('‚ùå Erro ao agendar transfer√™ncia:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"contaDestinoId\": {{contaDestinoId}},\n  \"valorTotal\": 150.00,\n  \"quantidadeParcelas\": 3,\n  \"periodicidadeDias\": 30,\n  \"dataInicio\": \"2025-07-15\",\n  \"debitarPrimeiraParcela\": true,\n  \"descricao\": \"Transfer√™ncia agendada para conta poupan√ßa\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/pagamentos/agendar",
              "host": ["{{baseUrl}}"],
              "path": ["pagamentos", "agendar"]
            }
          },
          "response": []
        },
        {
          "name": "2. Consultar Pagamento por ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Consultar Pagamento por ID - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Consultar Pagamento por ID - Resposta cont√©m dados do pagamento', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('valorTotal');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Dados do pagamento consultados com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao consultar pagamento:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pagamentos/{{pagamentoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["pagamentos", "{{pagamentoId}}"]
            }
          },
          "response": []
        },
        {
          "name": "3. Listar Pagamentos por Conta",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Listar Pagamentos por Conta - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Listar Pagamentos por Conta - Resposta cont√©m lista de pagamentos', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('pagamentos');",
                  "    pm.expect(jsonData).to.have.property('contaId');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Pagamentos listados com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao listar pagamentos:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pagamentos/conta/{{contaId}}",
              "host": ["{{baseUrl}}"],
              "path": ["pagamentos", "conta", "{{contaId}}"]
            }
          },
          "response": []
        },
        {
          "name": "4. Cancelar Pagamento",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cancelar Pagamento - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Cancelar Pagamento - Resposta cont√©m confirma√ß√£o', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Pagamento cancelado com sucesso');",
                  "} else {",
                  "    console.log('‚ùå Erro ao cancelar pagamento:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/pagamentos/{{pagamentoId}}/cancelar",
              "host": ["{{baseUrl}}"],
              "path": ["pagamentos", "{{pagamentoId}}", "cancelar"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Extratos",
      "item": [
        {
          "name": "1. Obter Extrato da Conta",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Obter Extrato da Conta - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Obter Extrato da Conta - Resposta cont√©m opera√ß√µes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('operacoes');",
                  "    pm.expect(jsonData).to.have.property('contaId');",
                  "    pm.expect(jsonData).to.have.property('saldoAtual');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.operacoes && response.operacoes.length > 0) {",
                  "        // Salva o ID da primeira opera√ß√£o para testes administrativos",
                  "        pm.collectionVariables.set('operacaoId', response.operacoes[0].id);",
                  "        pm.environment.set('operacaoId', response.operacoes[0].id);",
                  "        console.log('‚úÖ ID da primeira opera√ß√£o salvo:', response.operacoes[0].id);",
                  "    }",
                  "    console.log('‚úÖ Extrato obtido com sucesso');",
                  "    console.log('‚úÖ Saldo atual:', response.saldoAtual);",
                  "} else {",
                  "    console.log('‚ùå Erro ao obter extrato:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/contas/{{contaId}}/extrato?limite=10",
              "host": ["{{baseUrl}}"],
              "path": ["contas", "{{contaId}}", "extrato"],
              "query": [
                {
                  "key": "limite",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "2. Obter Extrato por Per√≠odo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Obter Extrato por Per√≠odo - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Obter Extrato por Per√≠odo - Resposta cont√©m opera√ß√µes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('operacoes');",
                  "    pm.expect(jsonData).to.have.property('contaId');",
                  "    pm.expect(jsonData).to.have.property('saldoAtual');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Extrato por per√≠odo obtido com sucesso');",
                  "    console.log('‚úÖ Opera√ß√µes no per√≠odo:', response.operacoes.length);",
                  "} else {",
                  "    console.log('‚ùå Erro ao obter extrato por per√≠odo:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/contas/{{contaId}}/extrato?dataInicio=2025-07-01&dataFim=2025-07-31",
              "host": ["{{baseUrl}}"],
              "path": ["contas", "{{contaId}}", "extrato"],
              "query": [
                {
                  "key": "dataInicio",
                  "value": "2025-07-01"
                },
                {
                  "key": "dataFim",
                  "value": "2025-07-31"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Estoque",
      "item": [
        {
          "name": "1. Consultar Estoque Global de C√©dulas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Consultar Estoque Global - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Consultar Estoque Global - Resposta cont√©m dados do estoque', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('estoque');",
                  "    pm.expect(jsonData).to.have.property('totalCedulas');",
                  "    pm.expect(jsonData).to.have.property('valorTotalDisponivel');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Estoque global consultado com sucesso');",
                  "    console.log('‚úÖ Total de c√©dulas:', response.totalCedulas);",
                  "    console.log('‚úÖ Valor total dispon√≠vel:', response.valorTotalDisponivel);",
                  "} else {",
                  "    console.log('‚ùå Erro ao consultar estoque global:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/estoque/cedulas",
              "host": ["{{baseUrl}}"],
              "path": ["estoque", "cedulas"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Opera√ß√µes Administrativas",
      "item": [
        {
          "name": "1. Desfazer Opera√ß√£o Espec√≠fica (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Desfazer Opera√ß√£o (Admin) - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Desfazer Opera√ß√£o (Admin) - Resposta cont√©m confirma√ß√£o', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('operacaoId');",
                  "    pm.expect(jsonData).to.have.property('adminResponsavel');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    console.log('‚úÖ Opera√ß√£o desfeita com sucesso pelo admin');",
                  "} else {",
                  "    console.log('‚ùå Erro ao desfazer opera√ß√£o:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/operacoes/desfazer/{{operacaoId}}/usuario/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["operacoes", "desfazer", "{{operacaoId}}", "usuario", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "2. Listar Opera√ß√µes do Usu√°rio (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Listar Opera√ß√µes do Usu√°rio (Admin) - Status 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Listar Opera√ß√µes do Usu√°rio (Admin) - Resposta cont√©m opera√ß√µes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('operacoes');",
                  "    pm.expect(jsonData).to.have.property('usuarioId');",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Opera√ß√µes do usu√°rio listadas com sucesso');",
                  "    console.log('‚úÖ Total de opera√ß√µes:', response.total);",
                  "} else {",
                  "    console.log('‚ùå Erro ao listar opera√ß√µes do usu√°rio:', pm.response.text());",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/operacoes/desfazer/usuario/{{userId}}/operacoes",
              "host": ["{{baseUrl}}"],
              "path": ["operacoes", "desfazer", "usuario", "{{userId}}", "operacoes"]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
